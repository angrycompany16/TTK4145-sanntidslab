{
	"nodes":[
		{"id":"0acb75d538b6968a","type":"text","text":"# Node\nPendingRequests\nPeerRequests\nPeerList\n\nAcks incoming PendingRequests, adds them to peers in peerlist\n\nAlso checks if its own PendingRequests have been acked. If everyone has acked, give the thumbs up","x":-474,"y":-189,"width":274,"height":409},
		{"id":"fbcf8d6538648111","type":"text","text":"# Peer\nPendingRequests\nPeerRequests\n","x":80,"y":-189,"width":274,"height":409},
		{"id":"b75cc398d097da5a","type":"text","text":"## UDP broadcast","x":-200,"y":-540,"width":283,"height":100},
		{"id":"c314f2af36e0765e","type":"text","text":"# Node\nPendingRequests\nPeerRequests\nPeerList\n\nWhen a PeerRequest comes in, check if it was intended for us. If so, then take it and add it to the PendingRequests list\n\nQ: When do we delete PendingRequests?\nA:When we ack a request","x":680,"y":-189,"width":274,"height":509},
		{"id":"b06664332f528640","type":"text","text":"# Peer\nPendingRequests\nPeerRequests\n","x":1234,"y":-189,"width":274,"height":409},
		{"id":"1b12dddd0b30e007","type":"text","text":"## UDP broadcast","x":951,"y":-520,"width":283,"height":100},
		{"id":"2df480293bb92b14","type":"text","text":"### Disconnect behaviour\nPeerA notices that PeerB and PeerC are disconnected\nThus it has no peers and must take every backed up request (which is every request) itself","x":-474,"y":260,"width":274,"height":440},
		{"id":"80fb5dde822cc7d3","type":"text","text":"### Disconnect behaviour\nPeerB and PeerC both notice that PeerA is dead. Then they look at their peer list, and compare to see that PeerB has the ID between PeerA and PeerC","x":80,"y":260,"width":274,"height":440},
		{"id":"1175dd7be0df4c8c","type":"text","text":"Q: When a peer dies, who should distribute the requests? After all, everyone has the backup\tlocalRequestChan chan requests.RequestInfo // Sent into main.go\n\n\nBackup ordering\nleast < ... < most (Comparing IDs)\n\nIf most dies, least will take the backup\nOtherwise each peer checks if it is the next in line\nWhat if peer lists are inconsistent?\nWe swill guarantee that someone takes it, so it's ok (in worst case, peerlist is empty for all so all elevators take the backup)\n\nAlternative approach (credz 2 Cyp the G04T):\nKeep a counter on each node. When a node dies, the node with the highest value on the counter will distribute the requests","x":80,"y":760,"width":560,"height":500},
		{"id":"67ce8852bbd1d067","type":"text","text":"### Reconnect Behaviour\n(Good enough) When a peer reconnects, it reads all its cab calls from the first heartbeat. Thus it should not lose any, as they must have been backed up by all peers in order for lights to turn on","x":-920,"y":260,"width":274,"height":440},
		{"id":"68fff9870f1f525d","type":"text","text":"### Disconnected behavior\nWhen disconnected, the elevator will assign all hall calls to itself, and since there are no peers they will simply not be backed up","x":-920,"y":740,"width":274,"height":440},
		{"id":"8656eed3e033c86a","type":"text","text":"Strange edge case:\nWhat if a peer rejoins while an elevator is taking a request?\nIt will not get backed up, the lights will be turned on...","x":-646,"y":740,"width":250,"height":223}
	],
	"edges":[
		{"id":"eb76203f0f2efc2e","fromNode":"0acb75d538b6968a","fromSide":"top","toNode":"b75cc398d097da5a","toSide":"left","label":"PendingRequest"},
		{"id":"2443539111db4815","fromNode":"b75cc398d097da5a","fromSide":"bottom","toNode":"0acb75d538b6968a","toSide":"top"},
		{"id":"560a935d175b73ad","fromNode":"b75cc398d097da5a","fromSide":"bottom","toNode":"fbcf8d6538648111","toSide":"top"},
		{"id":"de5d8fc98baeeaa5","fromNode":"c314f2af36e0765e","fromSide":"top","toNode":"1b12dddd0b30e007","toSide":"left","label":"PeerReq"},
		{"id":"8a21f6abaf975238","fromNode":"b06664332f528640","fromSide":"top","toNode":"1b12dddd0b30e007","toSide":"right"},
		{"id":"33909dea9f29e95e","fromNode":"1b12dddd0b30e007","fromSide":"bottom","toNode":"c314f2af36e0765e","toSide":"top"}
	]
}