{
	"nodes":[
		{"id":"32b1d0337c0a09cc","type":"text","text":"Distributor for Hall calls\nin: bool grid\nout: bool grid","x":-1680,"y":-778,"width":250,"height":100,"color":"#000000"},
		{"id":"49bd22dc826717ed","type":"text","text":"# Master\n- Checks for diff btw. state1 and state2\n# Slave 3","x":-1680,"y":-438,"width":250,"height":393},
		{"id":"ce190fa3d16080f5","type":"text","text":"# Slave 3","x":-1680,"y":41,"width":250,"height":160},
		{"id":"187da7f6193317df","type":"text","text":"# Slave 2\n--- same","x":-1220,"y":-338,"width":250,"height":193},
		{"id":"73aba7ff518e4f2f","type":"text","text":"# Updating the Global state\nTake || of all Slave states","x":-2740,"y":-728,"width":250,"height":285},
		{"id":"081cab210307724e","type":"text","text":"# Slave State\nCurrent floor\nCurrent local hall calls\nCurrent Cab calls\nIsBusy","x":-2420,"y":-728,"width":250,"height":285},
		{"id":"c35c2ef2da3335c2","type":"text","text":"New hall call!","x":-2420,"y":-96,"width":250,"height":50},
		{"id":"7e79aee981d76bd2","type":"text","text":"# Slave 1\n- LocalHallCalls bool grid","x":-2140,"y":-338,"width":250,"height":193},
		{"id":"3b4388f6bf8a796e","type":"text","text":"Shared, global data","x":-1960,"y":-658,"width":140,"height":100},
		{"id":"2bbd2585c582bbbd","type":"text","text":"# Slave State\nGlobal data:\n- All hall calls\n- State of every slave","x":-2420,"y":-1078,"width":250,"height":285},
		{"id":"4f1e99dff4fdd11f","type":"text","text":"# Slave init\nRequest state from master\nwhen received, begin servicing calls\n# Slave reconnect\nStart sharing the state again as usual\n","x":-2801,"y":-1127,"width":311,"height":334},
		{"id":"bf50c9703f05c07f","type":"text","text":"# The \"alive\" message\nReports that the slave is alive\n\nIf not received within \"Timeout\" seconds, the slave is removed from the network\n\nWhat if a slave gets assigned a task when timed out?\nThis is not a problem actually\n\nWhen a slave disconnects, the Distributor will route all calls to the remaining connected nodes\n\nIn addition, Master sends out a MasterAlive message\n\nThis ","x":-3160,"y":-750,"width":330,"height":605},
		{"id":"7d4b3500def4683a","type":"text","text":"# Peer 1\nBusy\n\nPeer 2:\nEach time it gets a request call, it returns busy. Skip\n\nPeer 3:\nEach time it gest a request call, it returns free or \"I am doing the request now\". When this is received, Peer 1 is good and can consider the request handled","x":600,"y":-110,"width":396,"height":405},
		{"id":"b474dbc9535fdab0","type":"text","text":"# Alt design: peer to peer\nPrinciple: Every elevator should, to as large a degree as possible only service its own calls\n\nAlgorithm idea:\nI receive a hall call\nFirst I try to take it\nThen iterate over connections (peers)\n- As soon as a peer is able to accept the call, they get it assigned\n- How do we work around packet loss?","x":946,"y":-840,"width":540,"height":423},
		{"id":"00d7c477181115da","type":"text","text":"# Peer 2\nBusy","x":1446,"y":-245,"width":329,"height":170},
		{"id":"a89f55798cb9bd1b","type":"text","text":"# Peer 3\nFree => Accept call\n- Service the request \n- Respond to each Request with \"Yes I am doing it\" or \"Yes it has been handled\"","x":1446,"y":-75,"width":329,"height":336},
		{"id":"153d19cbc051071a","type":"text","text":"# Peer 4\nFree","x":1446,"y":261,"width":329,"height":180},
		{"id":"2652bbc49884632f","type":"text","text":"# Peer 1\nAny requests that were being made to peer 2 will now instead be made to peer 3, and so on so forth. This may lead to a request being taken by multiple elevators, but is this a problem? This is not a catastrophic error","x":1959,"y":130,"width":387,"height":311},
		{"id":"bcf93b8168fba19e","type":"text","text":"# Peer 2\nWill have local Requests data, service all these. Also service hall calls, essentially run as usual except no requests will be coming in.\nAlso try to reconnect to the network at an even interval","x":2586,"y":130,"width":420,"height":311},
		{"id":"6fd80ca7d05a33ad","type":"text","text":"# Reconnecting nodes\nWhen reconnecting (Or connecting) the node needs to set up a connection with every other node in the network. It works as follows\n1. Broadcast the \"I'm alive\" message over the network\n2. Everyone reads the broadcast message and adds Peer x to their list of peers, if Peer x is not already there. No confirmation needed, everyone is constantly telling everyone else that they are on the network","x":2266,"y":480,"width":400,"height":420},
		{"id":"0f5e7c1409bb3f38","type":"text","text":"# Disconnect behaviour\nEvery peer broadcasts a \"I'm alive\" message on the network\nEvery peer also checks for the aliveness of other peers\nIf one peer is not alive, do not Request that it takes calls","x":2266,"y":-285,"width":400,"height":378},
		{"id":"043bb6b3c26aff64","type":"text","text":"# Button lights\n- Actually easy\n- Button lights are set based on what is read on the peer data broadcast\n- If a peer broadcasts that it is going to take a call, we can consider this to be a guarantee. Thus it is fine to light up the buttons.","x":1646,"y":480,"width":440,"height":420},
		{"id":"10f26b15b6816c2a","type":"text","text":"# Peer 1\nPeer 2 will disconnect, so peer 1 loses sight of it. However, it keeps broadcasting the data of how peer 2 looked the last time it was seen.","x":3119,"y":130,"width":387,"height":311},
		{"id":"4744ddbdfc9ccc13","type":"text","text":"# Peer 2\nRestarts. On initializing, read the state from the network messages. If this is the initialization of the whole network, the data being broadcasted will default to \"0\"-data.","x":3746,"y":130,"width":420,"height":311},
		{"id":"4bccd99b0384a304","type":"text","text":"# Failure behaviour\nImportant principle: \"Sometimes the best solution is just to kill yourself\"\nI.E. the primary failure behaviour is to restart. This means that a failure will always imply disconnecting from the network\nCalls being restored even in the case of a crash means that the data must be stored somewhere else.\nIn the \"I'm alive\" message, information about every other peer is also included.\nIn the case of a failure, when reconnecting, the peer reads the information that the other nodes are distributing about itself, and can thus pick up the calls that have been lost.","x":3426,"y":-440,"width":400,"height":533},
		{"id":"bea9c676a0fee3b6","type":"text","text":"# The cab request\nUid int // We only need Uid + Sender combo to be unique. Thus we do not need to synchronize the ids over the network :D \n\nSender IpAddr\n\nRequest info (floor etc.)","x":1540,"y":-840,"width":419,"height":423},
		{"id":"bcf98baa667953a5","type":"text","text":"# The \"I'm alive\" message\nSenderIp\nElevatorState[] peerStates // The state of every other peer, from my view","x":2020,"y":-840,"width":646,"height":423},
		{"id":"5aa105245882f0c1","type":"text","text":"# Peer 1\nBusy\n\nPeer 2:\nEach time it gets a request call, it returns busy. Skip\n\nPeer 3:\nEach time it gest a request call, it returns free or \"I am doing the request now\". When this is received, Peer 1 is good and can consider the request handled","x":534,"y":2650,"width":396,"height":405},
		{"id":"d136597d0a709f14","type":"text","text":"# Alt design: peer to peer\nPrinciple: Every elevator should, to as large a degree as possible only service its own calls\n\nAlgorithm idea:\nI receive a hall call\nFirst I try to take it\nThen iterate over connections (peers)\n- As soon as a peer is able to accept the call, they get it assigned\n- How do we work around packet loss?","x":880,"y":1920,"width":540,"height":423},
		{"id":"1dbf1bcbc9e14d70","type":"text","text":"# Peer 2\nBusy","x":1380,"y":2515,"width":329,"height":170},
		{"id":"3735115bbd2155d5","type":"text","text":"# Peer 3\nFree => Accept call\n- Service the request \n- Respond to each Request with \"Yes I am doing it\" or \"Yes it has been handled\"","x":1380,"y":2685,"width":329,"height":336},
		{"id":"dee27e536c4a201f","type":"text","text":"# Peer 4\nFree","x":1380,"y":3021,"width":329,"height":180},
		{"id":"863c1e1a6427c6cf","type":"text","text":"# Peer 1\nAny requests that were being made to peer 2 will now instead be made to peer 3, and so on so forth. This may lead to a request being taken by multiple elevators, but is this a problem? This is not a catastrophic error","x":1893,"y":2890,"width":387,"height":311},
		{"id":"a37f5c843fbc4c88","type":"text","text":"# Peer 2\nWill have local Requests data, service all these. Also service hall calls, essentially run as usual except no requests will be coming in.\nAlso try to reconnect to the network at an even interval","x":2520,"y":2890,"width":420,"height":311},
		{"id":"22425a8b174b2fd5","type":"text","text":"# Reconnecting nodes\nWhen reconnecting (Or connecting) the node needs to set up a connection with every other node in the network. It works as follows\n1. Broadcast the \"I'm alive\" message over the network\n2. Everyone reads the broadcast message and adds Peer x to their list of peers, if Peer x is not already there. No confirmation needed, everyone is constantly telling everyone else that they are on the network","x":2200,"y":3240,"width":400,"height":420},
		{"id":"819244b5d8f4803b","type":"text","text":"# Disconnect behaviour\nEvery peer broadcasts a \"I'm alive\" message on the network\nEvery peer also checks for the aliveness of other peers\nIf one peer is not alive, do not Request that it takes calls","x":2200,"y":2475,"width":400,"height":378},
		{"id":"be762a91d47661af","type":"text","text":"# Button lights\n- Actually easy\n- Button lights are set based on what is read on the peer data broadcast\n- If a peer broadcasts that it is going to take a call, we can consider this to be a guarantee. Thus it is fine to light up the buttons.","x":1580,"y":3240,"width":440,"height":420},
		{"id":"40795910debc9360","type":"text","text":"# Peer 1\nPeer 2 will disconnect, so peer 1 loses sight of it. However, it keeps broadcasting the data of how peer 2 looked the last time it was seen.","x":3053,"y":2890,"width":387,"height":311},
		{"id":"279a2fbbc2b19c98","type":"text","text":"# Peer 2\nRestarts. On initializing, read the state from the network messages. If this is the initialization of the whole network, the data being broadcasted will default to \"0\"-data.","x":3680,"y":2890,"width":420,"height":311},
		{"id":"15987744a7c8390a","type":"text","text":"# Failure behaviour\nImportant principle: \"Sometimes the best solution is just to kill yourself\"\nI.E. the primary failure behaviour is to restart. This means that a failure will always imply disconnecting from the network\nCalls being restored even in the case of a crash means that the data must be stored somewhere else.\nIn the \"I'm alive\" message, information about every other peer is also included.\nIn the case of a failure, when reconnecting, the peer reads the information that the other nodes are distributing about itself, and can thus pick up the calls that have been lost.","x":3360,"y":2320,"width":400,"height":533},
		{"id":"14ba5e63994454a5","type":"text","text":"# The cab request\nUid int // We only need Uid + Sender combo to be unique. Thus we do not need to synchronize the ids over the network :D \n\nSender IpAddr\n\nRequest info (floor etc.)","x":1474,"y":1920,"width":419,"height":423},
		{"id":"447c96bc1b32bebd","type":"text","text":"# The \"I'm alive\" message\nSenderIp\nElevatorState[] peerStates // The state of every other peer, from my view","x":1954,"y":1920,"width":646,"height":423},
		{"id":"a8c6207d9c716eec","type":"text","text":"# Node 2\nnodes []Node","x":1700,"y":4500,"width":250,"height":145},
		{"id":"dbe250620a99797a","type":"text","text":"# Node 1\nnodes []Node","x":1380,"y":4500,"width":255,"height":145},
		{"id":"b233a7659aeb6da9","type":"text","text":"# Node 3\nnodes []Node","x":1540,"y":4700,"width":250,"height":145},
		{"id":"4922e102ab0aaee3","type":"text","text":"# Alive message\nSenderIp IpAddress\nNetworkState []NodeState // Perceived state of every other node","x":2345,"y":4360,"width":366,"height":160},
		{"id":"f4da95f68608e579","type":"text","text":"# Node 2\nnodes []Node","x":2841,"y":4640,"width":255,"height":145},
		{"id":"f8a541c7e5fdf056","type":"text","text":"# Node 1\nnodes []Node","x":2401,"y":4640,"width":255,"height":145},
		{"id":"06ec04552a1396c8","type":"text","text":"# Broadcast","x":2403,"y":4160,"width":250,"height":60}
	],
	"edges":[
		{"id":"5dfb8b768d7fb25d","fromNode":"c35c2ef2da3335c2","fromSide":"right","toNode":"7e79aee981d76bd2","toSide":"bottom","label":"At"},
		{"id":"7c130306fa4e8ba7","fromNode":"7e79aee981d76bd2","fromSide":"right","toNode":"49bd22dc826717ed","toSide":"left","label":"Sends state\n(cont)"},
		{"id":"916fd0e2e42fcd19","fromNode":"187da7f6193317df","fromSide":"left","toNode":"49bd22dc826717ed","toSide":"right","label":"Sends state\n(cont)"},
		{"id":"00d847b6afd27048","fromNode":"49bd22dc826717ed","fromSide":"top","toNode":"3b4388f6bf8a796e","toSide":"bottom","label":"Writes to"},
		{"id":"12d8e3909c966407","fromNode":"49bd22dc826717ed","fromSide":"top","toNode":"32b1d0337c0a09cc","toSide":"bottom","label":"Runs"},
		{"id":"b76ba30481743366","fromNode":"32b1d0337c0a09cc","fromSide":"bottom","toNode":"187da7f6193317df","toSide":"top"},
		{"id":"38ffbdfb3ecc19bc","fromNode":"32b1d0337c0a09cc","fromSide":"bottom","toNode":"49bd22dc826717ed","toSide":"top"},
		{"id":"dfc923c2ef048d25","fromNode":"32b1d0337c0a09cc","fromSide":"bottom","toNode":"7e79aee981d76bd2","toSide":"top"},
		{"id":"ccfe4d0ba4b6b269","fromNode":"ce190fa3d16080f5","fromSide":"top","toNode":"49bd22dc826717ed","toSide":"bottom","label":"Same program"},
		{"id":"51d41ae5b1b2d15d","fromNode":"3b4388f6bf8a796e","fromSide":"top","toNode":"32b1d0337c0a09cc","toSide":"left"},
		{"id":"035eb088f81fd2f1","fromNode":"32b1d0337c0a09cc","fromSide":"bottom","toNode":"ce190fa3d16080f5","toSide":"right"},
		{"id":"3637afbe9d0f4e94","fromNode":"7d4b3500def4683a","fromSide":"right","toNode":"00d7c477181115da","toSide":"left","label":"Request call"},
		{"id":"1b0e8e9f9987be80","fromNode":"7d4b3500def4683a","fromSide":"right","toNode":"a89f55798cb9bd1b","toSide":"left","label":"Request call"},
		{"id":"887005a09b55889c","fromNode":"7d4b3500def4683a","fromSide":"right","toNode":"153d19cbc051071a","toSide":"left"},
		{"id":"e17af8179e747012","fromNode":"2652bbc49884632f","fromSide":"right","toNode":"bcf93b8168fba19e","toSide":"left","label":"Disconnected"},
		{"id":"7bc7fae660d64c94","fromNode":"10f26b15b6816c2a","fromSide":"right","toNode":"4744ddbdfc9ccc13","toSide":"left","label":"Crashed"},
		{"id":"85082dc472fc5ab3","fromNode":"5aa105245882f0c1","fromSide":"right","toNode":"1dbf1bcbc9e14d70","toSide":"left","label":"Request call"},
		{"id":"8edea861ee9c34c6","fromNode":"5aa105245882f0c1","fromSide":"right","toNode":"3735115bbd2155d5","toSide":"left","label":"Request call"},
		{"id":"3b8abba5a41a7430","fromNode":"5aa105245882f0c1","fromSide":"right","toNode":"dee27e536c4a201f","toSide":"left"},
		{"id":"cd3c9c49b4e3c152","fromNode":"863c1e1a6427c6cf","fromSide":"right","toNode":"a37f5c843fbc4c88","toSide":"left","label":"Disconnected"},
		{"id":"89a7ed0227653ae6","fromNode":"40795910debc9360","fromSide":"right","toNode":"279a2fbbc2b19c98","toSide":"left","label":"Crashed"},
		{"id":"24e5b813b5979152","fromNode":"dbe250620a99797a","fromSide":"bottom","toNode":"b233a7659aeb6da9","toSide":"top"},
		{"id":"a1903b44bb11a993","fromNode":"dbe250620a99797a","fromSide":"right","toNode":"a8c6207d9c716eec","toSide":"left"},
		{"id":"280eef602a0fbf0a","fromNode":"a8c6207d9c716eec","fromSide":"left","toNode":"dbe250620a99797a","toSide":"right"},
		{"id":"f0a283230a8c4795","fromNode":"b233a7659aeb6da9","fromSide":"top","toNode":"dbe250620a99797a","toSide":"bottom"},
		{"id":"f97bae355dd5809e","fromNode":"b233a7659aeb6da9","fromSide":"top","toNode":"a8c6207d9c716eec","toSide":"bottom"},
		{"id":"e22b916e96c30b96","fromNode":"a8c6207d9c716eec","fromSide":"bottom","toNode":"b233a7659aeb6da9","toSide":"top"},
		{"id":"29b891ee9ebd68bc","fromNode":"f8a541c7e5fdf056","fromSide":"top","toNode":"4922e102ab0aaee3","toSide":"bottom"},
		{"id":"47ad79b139446175","fromNode":"4922e102ab0aaee3","fromSide":"top","toNode":"06ec04552a1396c8","toSide":"bottom"},
		{"id":"cf302ae3009f670f","fromNode":"06ec04552a1396c8","fromSide":"right","toNode":"f4da95f68608e579","toSide":"top","label":"Reads that Node 1 is alive and well"}
	]
}